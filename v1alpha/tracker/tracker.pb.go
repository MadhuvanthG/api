// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tracker.proto

package v1alpha

import (
	context "context"
	fmt "fmt"
	deps "github.com/deps-cloud/api/v1alpha/deps"
	schema "github.com/deps-cloud/api/v1alpha/schema"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SourceRequest struct {
	Source               *schema.Source                   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	ManagementFiles      []*deps.DependencyManagementFile `protobuf:"bytes,2,rep,name=managementFiles,proto3" json:"managementFiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *SourceRequest) Reset()         { *m = SourceRequest{} }
func (m *SourceRequest) String() string { return proto.CompactTextString(m) }
func (*SourceRequest) ProtoMessage()    {}
func (*SourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ba8625d8751af3, []int{0}
}
func (m *SourceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SourceRequest.Unmarshal(m, b)
}
func (m *SourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SourceRequest.Marshal(b, m, deterministic)
}
func (m *SourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceRequest.Merge(m, src)
}
func (m *SourceRequest) XXX_Size() int {
	return xxx_messageInfo_SourceRequest.Size(m)
}
func (m *SourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SourceRequest proto.InternalMessageInfo

func (m *SourceRequest) GetSource() *schema.Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *SourceRequest) GetManagementFiles() []*deps.DependencyManagementFile {
	if m != nil {
		return m.ManagementFiles
	}
	return nil
}

type ListRequest struct {
	Page                 int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Count                int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ba8625d8751af3, []int{1}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRequest.Unmarshal(m, b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return xxx_messageInfo_ListRequest.Size(m)
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type TrackResponse struct {
	Tracking             bool     `protobuf:"varint,1,opt,name=tracking,proto3" json:"tracking,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackResponse) Reset()         { *m = TrackResponse{} }
func (m *TrackResponse) String() string { return proto.CompactTextString(m) }
func (*TrackResponse) ProtoMessage()    {}
func (*TrackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ba8625d8751af3, []int{2}
}
func (m *TrackResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackResponse.Unmarshal(m, b)
}
func (m *TrackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackResponse.Marshal(b, m, deterministic)
}
func (m *TrackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackResponse.Merge(m, src)
}
func (m *TrackResponse) XXX_Size() int {
	return xxx_messageInfo_TrackResponse.Size(m)
}
func (m *TrackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TrackResponse proto.InternalMessageInfo

func (m *TrackResponse) GetTracking() bool {
	if m != nil {
		return m.Tracking
	}
	return false
}

type ListSourceResponse struct {
	Page                 int32            `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Count                int32            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Sources              []*schema.Source `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListSourceResponse) Reset()         { *m = ListSourceResponse{} }
func (m *ListSourceResponse) String() string { return proto.CompactTextString(m) }
func (*ListSourceResponse) ProtoMessage()    {}
func (*ListSourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ba8625d8751af3, []int{3}
}
func (m *ListSourceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSourceResponse.Unmarshal(m, b)
}
func (m *ListSourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSourceResponse.Marshal(b, m, deterministic)
}
func (m *ListSourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSourceResponse.Merge(m, src)
}
func (m *ListSourceResponse) XXX_Size() int {
	return xxx_messageInfo_ListSourceResponse.Size(m)
}
func (m *ListSourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSourceResponse proto.InternalMessageInfo

func (m *ListSourceResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListSourceResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListSourceResponse) GetSources() []*schema.Source {
	if m != nil {
		return m.Sources
	}
	return nil
}

type ListModuleResponse struct {
	Page                 int32            `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Count                int32            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Modules              []*schema.Module `protobuf:"bytes,3,rep,name=modules,proto3" json:"modules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListModuleResponse) Reset()         { *m = ListModuleResponse{} }
func (m *ListModuleResponse) String() string { return proto.CompactTextString(m) }
func (*ListModuleResponse) ProtoMessage()    {}
func (*ListModuleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ba8625d8751af3, []int{4}
}
func (m *ListModuleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListModuleResponse.Unmarshal(m, b)
}
func (m *ListModuleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListModuleResponse.Marshal(b, m, deterministic)
}
func (m *ListModuleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListModuleResponse.Merge(m, src)
}
func (m *ListModuleResponse) XXX_Size() int {
	return xxx_messageInfo_ListModuleResponse.Size(m)
}
func (m *ListModuleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListModuleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListModuleResponse proto.InternalMessageInfo

func (m *ListModuleResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListModuleResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListModuleResponse) GetModules() []*schema.Module {
	if m != nil {
		return m.Modules
	}
	return nil
}

type ManagedSource struct {
	Source               *schema.Source  `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Manages              *schema.Manages `protobuf:"bytes,2,opt,name=manages,proto3" json:"manages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ManagedSource) Reset()         { *m = ManagedSource{} }
func (m *ManagedSource) String() string { return proto.CompactTextString(m) }
func (*ManagedSource) ProtoMessage()    {}
func (*ManagedSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ba8625d8751af3, []int{5}
}
func (m *ManagedSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagedSource.Unmarshal(m, b)
}
func (m *ManagedSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagedSource.Marshal(b, m, deterministic)
}
func (m *ManagedSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagedSource.Merge(m, src)
}
func (m *ManagedSource) XXX_Size() int {
	return xxx_messageInfo_ManagedSource.Size(m)
}
func (m *ManagedSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagedSource.DiscardUnknown(m)
}

var xxx_messageInfo_ManagedSource proto.InternalMessageInfo

func (m *ManagedSource) GetSource() *schema.Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ManagedSource) GetManages() *schema.Manages {
	if m != nil {
		return m.Manages
	}
	return nil
}

type ManagedModule struct {
	Manages              *schema.Manages `protobuf:"bytes,1,opt,name=manages,proto3" json:"manages,omitempty"`
	Module               *schema.Module  `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ManagedModule) Reset()         { *m = ManagedModule{} }
func (m *ManagedModule) String() string { return proto.CompactTextString(m) }
func (*ManagedModule) ProtoMessage()    {}
func (*ManagedModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ba8625d8751af3, []int{6}
}
func (m *ManagedModule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagedModule.Unmarshal(m, b)
}
func (m *ManagedModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagedModule.Marshal(b, m, deterministic)
}
func (m *ManagedModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagedModule.Merge(m, src)
}
func (m *ManagedModule) XXX_Size() int {
	return xxx_messageInfo_ManagedModule.Size(m)
}
func (m *ManagedModule) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagedModule.DiscardUnknown(m)
}

var xxx_messageInfo_ManagedModule proto.InternalMessageInfo

func (m *ManagedModule) GetManages() *schema.Manages {
	if m != nil {
		return m.Manages
	}
	return nil
}

func (m *ManagedModule) GetModule() *schema.Module {
	if m != nil {
		return m.Module
	}
	return nil
}

type DependencyRequest struct {
	Language             string   `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Organization         string   `protobuf:"bytes,5,opt,name=organization,proto3" json:"organization,omitempty"`
	Module               string   `protobuf:"bytes,6,opt,name=module,proto3" json:"module,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DependencyRequest) Reset()         { *m = DependencyRequest{} }
func (m *DependencyRequest) String() string { return proto.CompactTextString(m) }
func (*DependencyRequest) ProtoMessage()    {}
func (*DependencyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ba8625d8751af3, []int{7}
}
func (m *DependencyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DependencyRequest.Unmarshal(m, b)
}
func (m *DependencyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DependencyRequest.Marshal(b, m, deterministic)
}
func (m *DependencyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DependencyRequest.Merge(m, src)
}
func (m *DependencyRequest) XXX_Size() int {
	return xxx_messageInfo_DependencyRequest.Size(m)
}
func (m *DependencyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DependencyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DependencyRequest proto.InternalMessageInfo

func (m *DependencyRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *DependencyRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *DependencyRequest) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

type Dependency struct {
	Depends              *schema.Depends `protobuf:"bytes,1,opt,name=depends,proto3" json:"depends,omitempty"`
	Module               *schema.Module  `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Dependency) Reset()         { *m = Dependency{} }
func (m *Dependency) String() string { return proto.CompactTextString(m) }
func (*Dependency) ProtoMessage()    {}
func (*Dependency) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ba8625d8751af3, []int{8}
}
func (m *Dependency) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dependency.Unmarshal(m, b)
}
func (m *Dependency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dependency.Marshal(b, m, deterministic)
}
func (m *Dependency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dependency.Merge(m, src)
}
func (m *Dependency) XXX_Size() int {
	return xxx_messageInfo_Dependency.Size(m)
}
func (m *Dependency) XXX_DiscardUnknown() {
	xxx_messageInfo_Dependency.DiscardUnknown(m)
}

var xxx_messageInfo_Dependency proto.InternalMessageInfo

func (m *Dependency) GetDepends() *schema.Depends {
	if m != nil {
		return m.Depends
	}
	return nil
}

func (m *Dependency) GetModule() *schema.Module {
	if m != nil {
		return m.Module
	}
	return nil
}

type TopologyTier struct {
	Tier                 []*Dependency `protobuf:"bytes,1,rep,name=tier,proto3" json:"tier,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TopologyTier) Reset()         { *m = TopologyTier{} }
func (m *TopologyTier) String() string { return proto.CompactTextString(m) }
func (*TopologyTier) ProtoMessage()    {}
func (*TopologyTier) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ba8625d8751af3, []int{9}
}
func (m *TopologyTier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopologyTier.Unmarshal(m, b)
}
func (m *TopologyTier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopologyTier.Marshal(b, m, deterministic)
}
func (m *TopologyTier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopologyTier.Merge(m, src)
}
func (m *TopologyTier) XXX_Size() int {
	return xxx_messageInfo_TopologyTier.Size(m)
}
func (m *TopologyTier) XXX_DiscardUnknown() {
	xxx_messageInfo_TopologyTier.DiscardUnknown(m)
}

var xxx_messageInfo_TopologyTier proto.InternalMessageInfo

func (m *TopologyTier) GetTier() []*Dependency {
	if m != nil {
		return m.Tier
	}
	return nil
}

func init() {
	proto.RegisterType((*SourceRequest)(nil), "cloud.deps.api.v1alpha.tracker.SourceRequest")
	proto.RegisterType((*ListRequest)(nil), "cloud.deps.api.v1alpha.tracker.ListRequest")
	proto.RegisterType((*TrackResponse)(nil), "cloud.deps.api.v1alpha.tracker.TrackResponse")
	proto.RegisterType((*ListSourceResponse)(nil), "cloud.deps.api.v1alpha.tracker.ListSourceResponse")
	proto.RegisterType((*ListModuleResponse)(nil), "cloud.deps.api.v1alpha.tracker.ListModuleResponse")
	proto.RegisterType((*ManagedSource)(nil), "cloud.deps.api.v1alpha.tracker.ManagedSource")
	proto.RegisterType((*ManagedModule)(nil), "cloud.deps.api.v1alpha.tracker.ManagedModule")
	proto.RegisterType((*DependencyRequest)(nil), "cloud.deps.api.v1alpha.tracker.DependencyRequest")
	proto.RegisterType((*Dependency)(nil), "cloud.deps.api.v1alpha.tracker.Dependency")
	proto.RegisterType((*TopologyTier)(nil), "cloud.deps.api.v1alpha.tracker.TopologyTier")
}

func init() { proto.RegisterFile("tracker.proto", fileDescriptor_a0ba8625d8751af3) }

var fileDescriptor_a0ba8625d8751af3 = []byte{
	// 864 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x96, 0x4f, 0x6f, 0xdc, 0x44,
	0x18, 0xc6, 0x35, 0x9b, 0x6c, 0xfe, 0xbc, 0xe9, 0x2a, 0xf0, 0x0a, 0x5a, 0xb3, 0x15, 0x10, 0x2c,
	0x88, 0xa2, 0xb6, 0x6b, 0xef, 0x1a, 0xd2, 0x22, 0x04, 0x05, 0x21, 0x44, 0x2e, 0x94, 0x83, 0x9b,
	0x53, 0x2f, 0xd5, 0xd4, 0x1e, 0x79, 0xad, 0xee, 0x7a, 0x8c, 0x3d, 0x5b, 0xb4, 0x20, 0x84, 0x40,
	0x08, 0x71, 0x41, 0x42, 0xe2, 0xde, 0x03, 0x7c, 0x80, 0x1e, 0xb8, 0x73, 0xe0, 0x2b, 0x70, 0xe2,
	0xce, 0xf7, 0x00, 0xf9, 0xf5, 0xcc, 0xc6, 0x5e, 0x1a, 0xec, 0x4d, 0x95, 0x5c, 0xda, 0x9d, 0xf1,
	0xfb, 0xcc, 0xfb, 0x9b, 0x67, 0x66, 0x1e, 0x05, 0x7a, 0x2a, 0xe3, 0xc1, 0x43, 0x91, 0x39, 0x69,
	0x26, 0x95, 0xc4, 0x57, 0x82, 0x89, 0x9c, 0x85, 0x4e, 0x28, 0xd2, 0xdc, 0xe1, 0x69, 0xec, 0x3c,
	0x1a, 0xf1, 0x49, 0x3a, 0xe6, 0x8e, 0xae, 0xea, 0x8f, 0xa2, 0x58, 0x8d, 0x67, 0x0f, 0x9c, 0x40,
	0x4e, 0xdd, 0xa2, 0x68, 0x40, 0xf5, 0x2e, 0x4f, 0x63, 0x57, 0x97, 0xd2, 0x34, 0xfd, 0x53, 0x2e,
	0xd9, 0x3f, 0x6c, 0x96, 0xe4, 0xc1, 0x58, 0x4c, 0xcd, 0x7f, 0x5a, 0x76, 0xaf, 0x22, 0x8b, 0xb2,
	0x34, 0x18, 0x88, 0x40, 0xe6, 0xf3, 0x5c, 0x09, 0x3d, 0x8c, 0xb8, 0x12, 0x9f, 0xf3, 0xb9, 0xab,
	0xc6, 0x71, 0x16, 0xde, 0x4f, 0x79, 0xa6, 0xe6, 0x6e, 0x24, 0x65, 0x34, 0x11, 0x3c, 0x8d, 0x73,
	0xfd, 0x93, 0xba, 0xf0, 0x24, 0x91, 0x8a, 0xab, 0x58, 0x26, 0x1a, 0xc9, 0x7e, 0xc2, 0xa0, 0x77,
	0x57, 0xce, 0xb2, 0x40, 0xf8, 0xe2, 0xb3, 0x99, 0xc8, 0x15, 0xbe, 0x07, 0x1b, 0x39, 0x4d, 0x58,
	0x6c, 0x8f, 0x1d, 0xec, 0x78, 0x6f, 0x38, 0xa7, 0x18, 0xa1, 0x19, 0xb5, 0x5a, 0x8b, 0xf0, 0x3e,
	0xec, 0x4e, 0x79, 0xc2, 0x23, 0x31, 0x15, 0x89, 0xfa, 0x38, 0x9e, 0x88, 0xdc, 0xea, 0xec, 0xad,
	0x1d, 0xec, 0x78, 0x87, 0xa7, 0xad, 0x43, 0x13, 0x1f, 0x89, 0x54, 0x24, 0xa1, 0x48, 0x82, 0xf9,
	0x9d, 0x9a, 0xda, 0x5f, 0x5e, 0xcd, 0xbe, 0x05, 0x3b, 0x9f, 0xc4, 0xb9, 0x32, 0xb8, 0x08, 0xeb,
	0x29, 0x8f, 0x4a, 0xd8, 0xae, 0x4f, 0xbf, 0xf1, 0x05, 0xe8, 0x06, 0x72, 0x96, 0x28, 0xab, 0x43,
	0x93, 0xe5, 0xc0, 0xbe, 0x0e, 0xbd, 0xe3, 0xe2, 0xec, 0x7c, 0x91, 0xa7, 0x32, 0xc9, 0x05, 0xf6,
	0x61, 0x8b, 0x0e, 0x33, 0x4e, 0x22, 0x92, 0x6f, 0xf9, 0x8b, 0xb1, 0xfd, 0x35, 0x60, 0xd1, 0xc5,
	0x58, 0xa3, 0x15, 0xad, 0x9b, 0xe1, 0xfb, 0xb0, 0x59, 0x1a, 0x92, 0x5b, 0x6b, 0xb4, 0xfd, 0x96,
	0x36, 0x1a, 0x95, 0x01, 0xb8, 0x23, 0xc3, 0xd9, 0xe4, 0x8c, 0x00, 0x53, 0xd2, 0xb6, 0x05, 0xd0,
	0x9d, 0x8c, 0xca, 0xfe, 0x89, 0x41, 0xaf, 0x3c, 0x8b, 0xb0, 0x64, 0x7b, 0xd6, 0x9b, 0xf1, 0x01,
	0x6c, 0x96, 0x67, 0x99, 0x13, 0xe9, 0x8e, 0xb7, 0xdf, 0x44, 0x54, 0x56, 0xfb, 0x46, 0x56, 0x45,
	0x2a, 0x69, 0xab, 0x6b, 0xb2, 0x33, 0xad, 0x59, 0x6c, 0xaa, 0xdc, 0xb1, 0x86, 0x6a, 0x69, 0x93,
	0x16, 0xd9, 0x0f, 0xe1, 0xf9, 0x93, 0xab, 0x6b, 0xee, 0x64, 0x1f, 0xb6, 0x26, 0x3c, 0x89, 0x66,
	0xe6, 0xa4, 0xb6, 0xfd, 0xc5, 0x18, 0x6d, 0xb8, 0x24, 0xb3, 0x88, 0x27, 0xf1, 0x17, 0xf4, 0x0e,
	0xad, 0x2e, 0x7d, 0xaf, 0xcd, 0xe1, 0xe5, 0x05, 0xd3, 0x06, 0x7d, 0x35, 0xcd, 0x7e, 0x64, 0x00,
	0x27, 0xdd, 0x8a, 0xcd, 0x87, 0x34, 0x6a, 0xbb, 0xf9, 0x52, 0x9b, 0xfb, 0x46, 0xf6, 0xac, 0x9b,
	0xff, 0x14, 0x2e, 0x1d, 0xcb, 0x54, 0x4e, 0x64, 0x34, 0x3f, 0x8e, 0x45, 0x86, 0xb7, 0x61, 0x5d,
	0xc5, 0x22, 0xb3, 0x18, 0x5d, 0xb8, 0x6b, 0xce, 0xff, 0x27, 0x68, 0xe5, 0xcd, 0xfb, 0xa4, 0xf3,
	0x1e, 0x77, 0x4c, 0x18, 0xdd, 0x15, 0xd9, 0xa3, 0x38, 0x10, 0xf8, 0x0d, 0x83, 0xf5, 0xe2, 0x19,
	0xe0, 0xf5, 0xa6, 0xc5, 0x2a, 0x99, 0xd0, 0xf7, 0xda, 0x14, 0xd7, 0x9f, 0xb6, 0x6d, 0x7d, 0xfb,
	0xe7, 0xdf, 0x3f, 0x77, 0x10, 0x9f, 0x3b, 0x89, 0xe2, 0xf2, 0x25, 0xe2, 0x0f, 0x0c, 0xba, 0x14,
	0x1c, 0x38, 0x68, 0x5a, 0xb7, 0x96, 0xa4, 0xfd, 0xc6, 0xf2, 0x5a, 0x1c, 0xd9, 0xaf, 0x11, 0xc1,
	0x55, 0xfb, 0xf2, 0x32, 0x81, 0x4b, 0xf5, 0xef, 0xb0, 0x6b, 0xde, 0xaf, 0x6b, 0xd0, 0x2b, 0xcf,
	0xe0, 0x02, 0x0c, 0xaa, 0x47, 0xcf, 0x53, 0x0c, 0xd2, 0x49, 0x81, 0xdf, 0x31, 0xd8, 0x3e, 0x12,
	0xda, 0x50, 0x6c, 0x77, 0x87, 0x9a, 0xcd, 0xa9, 0x65, 0x8f, 0xfd, 0x2a, 0x75, 0x7f, 0x09, 0xaf,
	0x2c, 0x77, 0xd7, 0x26, 0x0d, 0x19, 0x7e, 0xcf, 0x00, 0x8e, 0x84, 0xd2, 0x3a, 0x6c, 0x97, 0x4e,
	0xad, 0x39, 0x4a, 0x6c, 0x7b, 0x8f, 0x38, 0xfa, 0x68, 0xfd, 0x87, 0xa3, 0x0c, 0x94, 0x70, 0xc8,
	0xbc, 0xbf, 0x3a, 0xd5, 0x50, 0x30, 0x27, 0xf5, 0x98, 0x41, 0xef, 0x48, 0x28, 0xf3, 0x41, 0xe5,
	0x38, 0x5a, 0xe1, 0x81, 0xe8, 0x83, 0x5b, 0xe1, 0x4d, 0xd9, 0x37, 0x08, 0x75, 0x1f, 0x5f, 0x5f,
	0xa0, 0x46, 0x19, 0x4f, 0xc7, 0xee, 0x97, 0x26, 0x8b, 0xbe, 0x72, 0xc3, 0x05, 0xcc, 0x90, 0xe1,
	0x2f, 0x0c, 0x76, 0x2b, 0x80, 0x41, 0x2c, 0xce, 0x1d, 0xd1, 0x21, 0xc4, 0x03, 0xdc, 0x6f, 0x46,
	0x2c, 0x70, 0x86, 0xcc, 0xfb, 0xa7, 0x0b, 0xbb, 0x26, 0x73, 0x8c, 0xb3, 0x4f, 0x18, 0xbc, 0x58,
	0x73, 0xd6, 0x14, 0x9c, 0x37, 0xfe, 0x21, 0xe1, 0xbb, 0x38, 0x68, 0xe3, 0xb0, 0xab, 0x34, 0xd5,
	0x90, 0xe1, 0xef, 0x0c, 0xae, 0x3e, 0x95, 0xb8, 0x88, 0x51, 0x11, 0x9e, 0x85, 0xfb, 0x46, 0x63,
	0xd8, 0x54, 0x5a, 0xd8, 0xef, 0x12, 0xf9, 0x4d, 0x7c, 0x6b, 0x25, 0x72, 0x57, 0x11, 0xde, 0x90,
	0xe1, 0x6f, 0x0c, 0xae, 0x2c, 0xdd, 0x95, 0x8b, 0x32, 0xfd, 0x16, 0xa1, 0x8f, 0xd0, 0x6d, 0x77,
	0x67, 0xaa, 0xb6, 0xff, 0xc1, 0xe0, 0xe5, 0x53, 0xa8, 0x2f, 0xca, 0xf8, 0xdb, 0x44, 0xff, 0x36,
	0xde, 0x5c, 0x91, 0x7e, 0x61, 0xfd, 0x87, 0xdb, 0xf7, 0x36, 0xb5, 0xf4, 0xc1, 0x06, 0xfd, 0x0d,
	0xff, 0xe6, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x16, 0xe9, 0xb7, 0x5c, 0xba, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SourceServiceClient is the client API for SourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SourceServiceClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListSourceResponse, error)
	Track(ctx context.Context, in *SourceRequest, opts ...grpc.CallOption) (*TrackResponse, error)
}

type sourceServiceClient struct {
	cc *grpc.ClientConn
}

func NewSourceServiceClient(cc *grpc.ClientConn) SourceServiceClient {
	return &sourceServiceClient{cc}
}

func (c *sourceServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListSourceResponse, error) {
	out := new(ListSourceResponse)
	err := c.cc.Invoke(ctx, "/cloud.deps.api.v1alpha.tracker.SourceService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) Track(ctx context.Context, in *SourceRequest, opts ...grpc.CallOption) (*TrackResponse, error) {
	out := new(TrackResponse)
	err := c.cc.Invoke(ctx, "/cloud.deps.api.v1alpha.tracker.SourceService/Track", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourceServiceServer is the server API for SourceService service.
type SourceServiceServer interface {
	List(context.Context, *ListRequest) (*ListSourceResponse, error)
	Track(context.Context, *SourceRequest) (*TrackResponse, error)
}

// UnimplementedSourceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSourceServiceServer struct {
}

func (*UnimplementedSourceServiceServer) List(ctx context.Context, req *ListRequest) (*ListSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedSourceServiceServer) Track(ctx context.Context, req *SourceRequest) (*TrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Track not implemented")
}

func RegisterSourceServiceServer(s *grpc.Server, srv SourceServiceServer) {
	s.RegisterService(&_SourceService_serviceDesc, srv)
}

func _SourceService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.deps.api.v1alpha.tracker.SourceService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_Track_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).Track(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.deps.api.v1alpha.tracker.SourceService/Track",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).Track(ctx, req.(*SourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SourceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.deps.api.v1alpha.tracker.SourceService",
	HandlerType: (*SourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SourceService_List_Handler,
		},
		{
			MethodName: "Track",
			Handler:    _SourceService_Track_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tracker.proto",
}

// ModuleServiceClient is the client API for ModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ModuleServiceClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListModuleResponse, error)
	GetSource(ctx context.Context, in *schema.Module, opts ...grpc.CallOption) (ModuleService_GetSourceClient, error)
	GetManaged(ctx context.Context, in *schema.Source, opts ...grpc.CallOption) (ModuleService_GetManagedClient, error)
}

type moduleServiceClient struct {
	cc *grpc.ClientConn
}

func NewModuleServiceClient(cc *grpc.ClientConn) ModuleServiceClient {
	return &moduleServiceClient{cc}
}

func (c *moduleServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListModuleResponse, error) {
	out := new(ListModuleResponse)
	err := c.cc.Invoke(ctx, "/cloud.deps.api.v1alpha.tracker.ModuleService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) GetSource(ctx context.Context, in *schema.Module, opts ...grpc.CallOption) (ModuleService_GetSourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ModuleService_serviceDesc.Streams[0], "/cloud.deps.api.v1alpha.tracker.ModuleService/GetSource", opts...)
	if err != nil {
		return nil, err
	}
	x := &moduleServiceGetSourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ModuleService_GetSourceClient interface {
	Recv() (*ManagedSource, error)
	grpc.ClientStream
}

type moduleServiceGetSourceClient struct {
	grpc.ClientStream
}

func (x *moduleServiceGetSourceClient) Recv() (*ManagedSource, error) {
	m := new(ManagedSource)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *moduleServiceClient) GetManaged(ctx context.Context, in *schema.Source, opts ...grpc.CallOption) (ModuleService_GetManagedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ModuleService_serviceDesc.Streams[1], "/cloud.deps.api.v1alpha.tracker.ModuleService/GetManaged", opts...)
	if err != nil {
		return nil, err
	}
	x := &moduleServiceGetManagedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ModuleService_GetManagedClient interface {
	Recv() (*ManagedModule, error)
	grpc.ClientStream
}

type moduleServiceGetManagedClient struct {
	grpc.ClientStream
}

func (x *moduleServiceGetManagedClient) Recv() (*ManagedModule, error) {
	m := new(ManagedModule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ModuleServiceServer is the server API for ModuleService service.
type ModuleServiceServer interface {
	List(context.Context, *ListRequest) (*ListModuleResponse, error)
	GetSource(*schema.Module, ModuleService_GetSourceServer) error
	GetManaged(*schema.Source, ModuleService_GetManagedServer) error
}

// UnimplementedModuleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedModuleServiceServer struct {
}

func (*UnimplementedModuleServiceServer) List(ctx context.Context, req *ListRequest) (*ListModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedModuleServiceServer) GetSource(req *schema.Module, srv ModuleService_GetSourceServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSource not implemented")
}
func (*UnimplementedModuleServiceServer) GetManaged(req *schema.Source, srv ModuleService_GetManagedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetManaged not implemented")
}

func RegisterModuleServiceServer(s *grpc.Server, srv ModuleServiceServer) {
	s.RegisterService(&_ModuleService_serviceDesc, srv)
}

func _ModuleService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.deps.api.v1alpha.tracker.ModuleService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_GetSource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(schema.Module)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModuleServiceServer).GetSource(m, &moduleServiceGetSourceServer{stream})
}

type ModuleService_GetSourceServer interface {
	Send(*ManagedSource) error
	grpc.ServerStream
}

type moduleServiceGetSourceServer struct {
	grpc.ServerStream
}

func (x *moduleServiceGetSourceServer) Send(m *ManagedSource) error {
	return x.ServerStream.SendMsg(m)
}

func _ModuleService_GetManaged_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(schema.Source)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModuleServiceServer).GetManaged(m, &moduleServiceGetManagedServer{stream})
}

type ModuleService_GetManagedServer interface {
	Send(*ManagedModule) error
	grpc.ServerStream
}

type moduleServiceGetManagedServer struct {
	grpc.ServerStream
}

func (x *moduleServiceGetManagedServer) Send(m *ManagedModule) error {
	return x.ServerStream.SendMsg(m)
}

var _ModuleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.deps.api.v1alpha.tracker.ModuleService",
	HandlerType: (*ModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ModuleService_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSource",
			Handler:       _ModuleService_GetSource_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetManaged",
			Handler:       _ModuleService_GetManaged_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tracker.proto",
}

// DependencyServiceClient is the client API for DependencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DependencyServiceClient interface {
	GetDependents(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (DependencyService_GetDependentsClient, error)
	GetDependencies(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (DependencyService_GetDependenciesClient, error)
}

type dependencyServiceClient struct {
	cc *grpc.ClientConn
}

func NewDependencyServiceClient(cc *grpc.ClientConn) DependencyServiceClient {
	return &dependencyServiceClient{cc}
}

func (c *dependencyServiceClient) GetDependents(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (DependencyService_GetDependentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DependencyService_serviceDesc.Streams[0], "/cloud.deps.api.v1alpha.tracker.DependencyService/GetDependents", opts...)
	if err != nil {
		return nil, err
	}
	x := &dependencyServiceGetDependentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DependencyService_GetDependentsClient interface {
	Recv() (*Dependency, error)
	grpc.ClientStream
}

type dependencyServiceGetDependentsClient struct {
	grpc.ClientStream
}

func (x *dependencyServiceGetDependentsClient) Recv() (*Dependency, error) {
	m := new(Dependency)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dependencyServiceClient) GetDependencies(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (DependencyService_GetDependenciesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DependencyService_serviceDesc.Streams[1], "/cloud.deps.api.v1alpha.tracker.DependencyService/GetDependencies", opts...)
	if err != nil {
		return nil, err
	}
	x := &dependencyServiceGetDependenciesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DependencyService_GetDependenciesClient interface {
	Recv() (*Dependency, error)
	grpc.ClientStream
}

type dependencyServiceGetDependenciesClient struct {
	grpc.ClientStream
}

func (x *dependencyServiceGetDependenciesClient) Recv() (*Dependency, error) {
	m := new(Dependency)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DependencyServiceServer is the server API for DependencyService service.
type DependencyServiceServer interface {
	GetDependents(*DependencyRequest, DependencyService_GetDependentsServer) error
	GetDependencies(*DependencyRequest, DependencyService_GetDependenciesServer) error
}

// UnimplementedDependencyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDependencyServiceServer struct {
}

func (*UnimplementedDependencyServiceServer) GetDependents(req *DependencyRequest, srv DependencyService_GetDependentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDependents not implemented")
}
func (*UnimplementedDependencyServiceServer) GetDependencies(req *DependencyRequest, srv DependencyService_GetDependenciesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDependencies not implemented")
}

func RegisterDependencyServiceServer(s *grpc.Server, srv DependencyServiceServer) {
	s.RegisterService(&_DependencyService_serviceDesc, srv)
}

func _DependencyService_GetDependents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DependencyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DependencyServiceServer).GetDependents(m, &dependencyServiceGetDependentsServer{stream})
}

type DependencyService_GetDependentsServer interface {
	Send(*Dependency) error
	grpc.ServerStream
}

type dependencyServiceGetDependentsServer struct {
	grpc.ServerStream
}

func (x *dependencyServiceGetDependentsServer) Send(m *Dependency) error {
	return x.ServerStream.SendMsg(m)
}

func _DependencyService_GetDependencies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DependencyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DependencyServiceServer).GetDependencies(m, &dependencyServiceGetDependenciesServer{stream})
}

type DependencyService_GetDependenciesServer interface {
	Send(*Dependency) error
	grpc.ServerStream
}

type dependencyServiceGetDependenciesServer struct {
	grpc.ServerStream
}

func (x *dependencyServiceGetDependenciesServer) Send(m *Dependency) error {
	return x.ServerStream.SendMsg(m)
}

var _DependencyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.deps.api.v1alpha.tracker.DependencyService",
	HandlerType: (*DependencyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDependents",
			Handler:       _DependencyService_GetDependents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDependencies",
			Handler:       _DependencyService_GetDependencies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tracker.proto",
}

// TopologyServiceClient is the client API for TopologyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TopologyServiceClient interface {
	GetDependentsTopology(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (TopologyService_GetDependentsTopologyClient, error)
	GetDependentsTopologyTiered(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (TopologyService_GetDependentsTopologyTieredClient, error)
	GetDependenciesTopology(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (TopologyService_GetDependenciesTopologyClient, error)
	GetDependenciesTopologyTiered(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (TopologyService_GetDependenciesTopologyTieredClient, error)
}

type topologyServiceClient struct {
	cc *grpc.ClientConn
}

func NewTopologyServiceClient(cc *grpc.ClientConn) TopologyServiceClient {
	return &topologyServiceClient{cc}
}

func (c *topologyServiceClient) GetDependentsTopology(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (TopologyService_GetDependentsTopologyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TopologyService_serviceDesc.Streams[0], "/cloud.deps.api.v1alpha.tracker.TopologyService/GetDependentsTopology", opts...)
	if err != nil {
		return nil, err
	}
	x := &topologyServiceGetDependentsTopologyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TopologyService_GetDependentsTopologyClient interface {
	Recv() (*Dependency, error)
	grpc.ClientStream
}

type topologyServiceGetDependentsTopologyClient struct {
	grpc.ClientStream
}

func (x *topologyServiceGetDependentsTopologyClient) Recv() (*Dependency, error) {
	m := new(Dependency)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *topologyServiceClient) GetDependentsTopologyTiered(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (TopologyService_GetDependentsTopologyTieredClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TopologyService_serviceDesc.Streams[1], "/cloud.deps.api.v1alpha.tracker.TopologyService/GetDependentsTopologyTiered", opts...)
	if err != nil {
		return nil, err
	}
	x := &topologyServiceGetDependentsTopologyTieredClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TopologyService_GetDependentsTopologyTieredClient interface {
	Recv() (*TopologyTier, error)
	grpc.ClientStream
}

type topologyServiceGetDependentsTopologyTieredClient struct {
	grpc.ClientStream
}

func (x *topologyServiceGetDependentsTopologyTieredClient) Recv() (*TopologyTier, error) {
	m := new(TopologyTier)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *topologyServiceClient) GetDependenciesTopology(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (TopologyService_GetDependenciesTopologyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TopologyService_serviceDesc.Streams[2], "/cloud.deps.api.v1alpha.tracker.TopologyService/GetDependenciesTopology", opts...)
	if err != nil {
		return nil, err
	}
	x := &topologyServiceGetDependenciesTopologyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TopologyService_GetDependenciesTopologyClient interface {
	Recv() (*Dependency, error)
	grpc.ClientStream
}

type topologyServiceGetDependenciesTopologyClient struct {
	grpc.ClientStream
}

func (x *topologyServiceGetDependenciesTopologyClient) Recv() (*Dependency, error) {
	m := new(Dependency)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *topologyServiceClient) GetDependenciesTopologyTiered(ctx context.Context, in *DependencyRequest, opts ...grpc.CallOption) (TopologyService_GetDependenciesTopologyTieredClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TopologyService_serviceDesc.Streams[3], "/cloud.deps.api.v1alpha.tracker.TopologyService/GetDependenciesTopologyTiered", opts...)
	if err != nil {
		return nil, err
	}
	x := &topologyServiceGetDependenciesTopologyTieredClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TopologyService_GetDependenciesTopologyTieredClient interface {
	Recv() (*TopologyTier, error)
	grpc.ClientStream
}

type topologyServiceGetDependenciesTopologyTieredClient struct {
	grpc.ClientStream
}

func (x *topologyServiceGetDependenciesTopologyTieredClient) Recv() (*TopologyTier, error) {
	m := new(TopologyTier)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TopologyServiceServer is the server API for TopologyService service.
type TopologyServiceServer interface {
	GetDependentsTopology(*DependencyRequest, TopologyService_GetDependentsTopologyServer) error
	GetDependentsTopologyTiered(*DependencyRequest, TopologyService_GetDependentsTopologyTieredServer) error
	GetDependenciesTopology(*DependencyRequest, TopologyService_GetDependenciesTopologyServer) error
	GetDependenciesTopologyTiered(*DependencyRequest, TopologyService_GetDependenciesTopologyTieredServer) error
}

// UnimplementedTopologyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTopologyServiceServer struct {
}

func (*UnimplementedTopologyServiceServer) GetDependentsTopology(req *DependencyRequest, srv TopologyService_GetDependentsTopologyServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDependentsTopology not implemented")
}
func (*UnimplementedTopologyServiceServer) GetDependentsTopologyTiered(req *DependencyRequest, srv TopologyService_GetDependentsTopologyTieredServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDependentsTopologyTiered not implemented")
}
func (*UnimplementedTopologyServiceServer) GetDependenciesTopology(req *DependencyRequest, srv TopologyService_GetDependenciesTopologyServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDependenciesTopology not implemented")
}
func (*UnimplementedTopologyServiceServer) GetDependenciesTopologyTiered(req *DependencyRequest, srv TopologyService_GetDependenciesTopologyTieredServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDependenciesTopologyTiered not implemented")
}

func RegisterTopologyServiceServer(s *grpc.Server, srv TopologyServiceServer) {
	s.RegisterService(&_TopologyService_serviceDesc, srv)
}

func _TopologyService_GetDependentsTopology_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DependencyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TopologyServiceServer).GetDependentsTopology(m, &topologyServiceGetDependentsTopologyServer{stream})
}

type TopologyService_GetDependentsTopologyServer interface {
	Send(*Dependency) error
	grpc.ServerStream
}

type topologyServiceGetDependentsTopologyServer struct {
	grpc.ServerStream
}

func (x *topologyServiceGetDependentsTopologyServer) Send(m *Dependency) error {
	return x.ServerStream.SendMsg(m)
}

func _TopologyService_GetDependentsTopologyTiered_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DependencyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TopologyServiceServer).GetDependentsTopologyTiered(m, &topologyServiceGetDependentsTopologyTieredServer{stream})
}

type TopologyService_GetDependentsTopologyTieredServer interface {
	Send(*TopologyTier) error
	grpc.ServerStream
}

type topologyServiceGetDependentsTopologyTieredServer struct {
	grpc.ServerStream
}

func (x *topologyServiceGetDependentsTopologyTieredServer) Send(m *TopologyTier) error {
	return x.ServerStream.SendMsg(m)
}

func _TopologyService_GetDependenciesTopology_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DependencyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TopologyServiceServer).GetDependenciesTopology(m, &topologyServiceGetDependenciesTopologyServer{stream})
}

type TopologyService_GetDependenciesTopologyServer interface {
	Send(*Dependency) error
	grpc.ServerStream
}

type topologyServiceGetDependenciesTopologyServer struct {
	grpc.ServerStream
}

func (x *topologyServiceGetDependenciesTopologyServer) Send(m *Dependency) error {
	return x.ServerStream.SendMsg(m)
}

func _TopologyService_GetDependenciesTopologyTiered_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DependencyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TopologyServiceServer).GetDependenciesTopologyTiered(m, &topologyServiceGetDependenciesTopologyTieredServer{stream})
}

type TopologyService_GetDependenciesTopologyTieredServer interface {
	Send(*TopologyTier) error
	grpc.ServerStream
}

type topologyServiceGetDependenciesTopologyTieredServer struct {
	grpc.ServerStream
}

func (x *topologyServiceGetDependenciesTopologyTieredServer) Send(m *TopologyTier) error {
	return x.ServerStream.SendMsg(m)
}

var _TopologyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.deps.api.v1alpha.tracker.TopologyService",
	HandlerType: (*TopologyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDependentsTopology",
			Handler:       _TopologyService_GetDependentsTopology_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDependentsTopologyTiered",
			Handler:       _TopologyService_GetDependentsTopologyTiered_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDependenciesTopology",
			Handler:       _TopologyService_GetDependenciesTopology_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDependenciesTopologyTiered",
			Handler:       _TopologyService_GetDependenciesTopologyTiered_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tracker.proto",
}

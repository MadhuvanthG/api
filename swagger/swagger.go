// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package swagger generated by go-bindata.// sources:
// v1alpha/tracker/tracker.swagger.json
// v1alpha/extractor/extractor.swagger.json
// v1alpha/schema/schema.swagger.json
// v1alpha/deps/deps.swagger.json
// v1alpha/store/store.swagger.json
package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _v1alphaTrackerTrackerSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4d\x6f\xe3\x36\x13\xbe\xfb\x57\x10\x7a\xdf\xe3\x22\x4e\xd3\x5b\x6e\x8b\x6e\x0b\x14\xe8\x5e\x9a\xdc\x8a\x20\x60\xa4\xb1\xc2\xad\x44\x32\xe4\x28\xad\xbb\xf0\x7f\x2f\x24\x52\x91\x28\x59\xb6\x3e\x93\x28\x25\x81\xc5\xc6\x16\x39\x9e\xe1\xcc\xf3\xcc\x0c\xc5\xef\x1b\x42\x02\xfd\x17\x8d\x63\x50\xc1\x35\x09\xae\x2e\x2e\x83\x4f\xf9\x77\x8c\xef\x44\x70\x4d\xf2\xe7\x84\x04\xc8\x30\x81\xfc\xf9\xf3\x0f\x34\x91\x8f\x74\x8b\x8a\x86\x7f\x82\x2a\xff\xbf\x90\x4a\xa0\x28\x56\x12\x12\x3c\x83\xd2\x4c\xf0\x62\xbe\xf9\x93\x70\x81\x44\x03\x06\x1b\x42\x0e\x85\xfc\x50\x70\x9d\xa5\xa0\x83\x6b\xf2\x87\x59\x45\xa5\x4c\x58\x48\x91\x09\xbe\xfd\xa6\x05\xcf\xe7\xde\x15\x73\xa5\x12\x51\x16\xf6\x9c\x4b\xf1\x51\x57\x8a\x6f\x4b\x85\x63\x45\xe5\xe3\xf6\x7b\x42\x79\x9c\xd1\x18\x0e\xdb\x08\x24\xf0\x08\x78\xc8\xa0\x9a\x4f\x48\x10\x03\xd6\x3e\x12\x12\x08\x09\xaa\xf8\xa5\x5f\xa3\xdc\xa2\x2f\xe5\xba\xfd\x0d\xa8\x67\x16\xc2\xfd\x6f\x4c\xe3\x97\xba\xb4\x4f\xd5\x62\x05\x5a\x0a\xae\x9d\x9f\x28\x1e\x5c\x5d\x5e\x36\xbe\x22\x24\x88\x40\x87\x8a\x49\xb4\x9b\xf7\x99\xe8\x2c\x0c\x41\xeb\x5d\x96\x90\x52\xd2\x45\x4d\x7c\xb1\x48\x87\x8f\x90\xd2\x96\x30\x42\x82\xff\x2b\xd8\xe5\x72\xfe\xb7\x8d\x60\xc7\x38\xcb\xe5\xea\xd2\x65\x4d\xad\x7f\xb7\xf2\x03\x47\xca\xa1\xf6\xe9\x50\xff\xe1\x20\x82\x1d\xcd\x12\x3c\x6f\x04\x27\x19\x87\xbf\x25\x84\x08\x11\x01\xa5\x84\x7a\xb1\x65\xaa\x29\x2a\xe3\xc8\x52\xf8\x39\x17\x7a\x42\xef\xcd\x11\x0b\x02\x49\x15\x4d\x01\x41\x55\x61\x65\x46\xc3\x1c\x4e\xd3\x22\xf2\xcb\xc8\x69\xea\xcc\x0a\x2b\xf3\xb0\x6b\x3e\x51\xf0\x94\x31\x05\x79\xd4\xa0\xca\xa0\xf1\x14\xf7\xb2\x90\xab\x51\x31\x1e\x07\x5d\xfb\xdc\xa1\x8d\x50\x31\xe5\xec\x9f\x22\x2e\x8f\x6b\xf4\x94\x81\xda\x9f\x50\x69\x47\x13\x3d\xaf\x4e\xa9\x88\xb2\xa4\x63\x7f\x66\xd6\xe6\xe5\xef\xbb\x9a\x47\x91\xc6\x4d\x5f\xb6\xd1\x5a\x89\xb9\xdb\xd4\x85\x59\x03\x7b\x12\xc6\x16\x85\x14\x89\x88\xf7\x43\x98\xe3\xd6\xae\xe9\xe2\x8d\xf2\xb9\xe7\x0f\xcf\x1f\x9e\x3f\x16\xd5\xa6\x37\x7f\x34\x30\x3b\x33\x7b\x6c\x91\x81\xd1\x7f\x76\x12\xb9\x35\x92\x57\x49\x25\x46\x77\x4f\x28\x76\x78\x42\xf1\x84\xd2\x4d\x28\x38\x63\xf7\x82\x2b\xec\x5d\xd0\x57\x1e\xe5\xf0\x44\xf1\x81\x88\x62\x81\xce\x05\xe7\xef\x5b\x70\xc5\x5d\x8b\x67\x8e\x97\xe1\x99\xe3\x03\x31\xc7\x02\x25\xc6\x52\x1d\x0b\xae\xbe\x5f\x41\xdf\xad\x78\x2a\x99\x45\xa7\x8f\x44\x25\xc6\x96\x41\x9d\xc9\xd7\x62\x49\x9d\x24\xd6\x43\x06\x46\x77\x4f\x01\x76\x74\x04\xb8\xec\x84\xff\x94\xf0\x66\x1c\x21\x06\xd5\x5c\xbd\x13\x2a\xa5\x68\x27\xfc\x78\x35\x14\x8c\xa1\xc8\x38\xbe\x0b\x65\x7b\x63\xd5\x01\xd0\x50\xa4\x6e\x53\xca\x69\x3c\x2c\xb1\xb7\x11\xfb\xd5\x0a\x59\x0f\x70\x8d\xc2\x1e\xb9\x76\x74\xa0\x21\x53\xc9\xfb\xca\x4b\xd3\x62\x5d\x8b\x4c\x85\x30\x2d\xd4\x6f\x0a\x19\x2b\x3a\x2f\xb3\x0a\xfb\x50\xb7\x63\x54\x9d\xfa\xfa\x55\xa1\xaf\x54\xcd\x58\x86\x11\xb4\x45\xf1\x00\x2a\x30\x38\x5a\x67\x9d\x6a\x74\xf7\x14\x60\x87\xaf\x53\xdf\xa2\x4e\x75\x00\x34\x14\xa9\x26\x9a\xeb\x78\x95\x42\x0f\x01\xec\x6d\xb1\x7e\x15\x88\x2d\x54\xf5\x60\xb5\xa3\x03\x00\x0f\x22\x6a\x05\xb9\x89\xff\x63\x4f\x4e\x9f\x29\x8d\xf4\x53\xc9\xaa\x4f\x19\x68\xec\x63\xef\x3c\x08\x79\xb9\x4a\x5b\x53\xa9\xba\xf8\x1a\x81\xd4\xd5\x2b\x24\xd3\xe7\xa4\xc0\xf1\x17\x96\x38\x95\x6f\x89\x78\xf1\xf0\x0d\xc2\x8a\x49\x02\xa9\x72\x18\x21\x6b\xe0\xa2\xaa\x8f\x1a\x68\xe9\xca\xe1\x75\xdf\xea\xbd\x46\x48\xc7\xac\x74\xaa\xa0\x11\xeb\x6d\xc5\x32\x62\x65\x75\x97\x79\xf0\xd2\x8e\x1b\xc6\xce\x7a\xaa\x14\x75\xa3\x34\x60\x08\x69\x73\x7e\x67\x08\x5a\x7a\x74\xbd\x7d\x9c\x97\x0f\x47\x09\xb6\xb8\xb8\xfd\x90\xed\x3e\xf3\xfd\x94\xb0\xc8\xe7\xdf\xe7\x6d\xe2\x98\x2d\xa6\x49\x76\xce\x37\xce\x0e\x55\x69\xe8\x61\x8f\x35\x80\x1c\xb7\xd0\x61\xa3\x09\x26\x42\x43\x40\x6f\xfb\x42\x11\x75\x9a\x77\x2c\xd1\x76\xa7\x59\x27\xa4\x41\xeb\x91\x38\x8c\x00\x29\x4b\x16\x8b\xc9\x7a\x48\x0d\x88\x44\xc3\xbe\x26\x8a\xf5\x5b\x51\x94\x85\xfb\x7d\x28\xb8\x46\x45\x19\x6f\x66\xd2\x7e\x44\x17\x0a\x39\x07\xe6\xfb\x34\x46\xa7\x36\xd3\xd0\xfe\x9b\x6d\xe6\x78\xbe\x1f\xca\xba\xa7\xf6\xa0\x49\xfd\xaf\xba\x05\xaf\x9c\xb8\x4e\xec\xc3\x4d\xeb\xd0\x6b\xe8\x3e\x0c\xa1\xf7\xa3\x8a\x9c\xbb\x39\x3e\x41\xb7\x57\xcc\xb5\xd6\x8a\x71\xe9\xb6\xdf\x8d\xd7\x29\x89\x98\x99\xd2\x79\x91\x1d\x28\x1b\x93\xda\x3b\xfb\x89\xc6\xe3\xac\xde\xc7\xb5\xf9\xbe\x75\x7b\xe0\xe3\x7b\xbe\xf9\xca\x65\x82\xc5\xed\xb7\xcc\x4b\xd8\x6c\x15\xb6\x79\x64\xa4\xd1\xee\x0b\xe2\x09\x36\xcb\x13\x89\x68\x7c\x31\x69\x8e\x91\xe6\xaf\x51\x97\x75\x90\x93\xe0\xc7\x39\xa6\x71\x22\xfa\x5f\x71\x4c\xfb\xdc\x7b\x01\xc7\xd8\x8a\x63\x8a\x63\x66\xc9\x0e\x0b\x1b\xeb\xd2\xc4\x68\xa3\x5d\x9a\x99\xc2\x8a\xad\xa2\xff\xac\xa7\xca\x3e\x61\x40\x09\x3a\x04\x91\x7d\xec\x9e\x5e\x9e\xb6\xde\xea\x9e\xd5\xb3\xe9\x2b\xc7\xea\x39\x76\xf1\x94\xdd\xee\xa9\xe1\x3b\xb3\xbb\x3c\x29\x5c\x0c\x34\x27\x8f\x27\x87\x83\xc7\xa9\x4b\x26\xd6\x50\x2b\x28\x21\xdd\x37\x03\x53\xec\xcd\x05\xe5\x9d\x5b\x87\xcd\x0f\x42\x24\x40\x79\xe7\xf1\x9b\x7d\x7c\x46\xeb\xe3\x87\x94\x13\xd4\x7e\xf3\xe3\xe0\x9f\x56\x7e\x3c\xd4\x19\x8b\x93\x9b\xb0\x41\x8c\x59\x1e\xf6\xbd\x4e\xde\xd9\xe4\xff\x0e\x9b\x7f\x03\x00\x00\xff\xff\xe8\x55\x9a\x48\xf3\x44\x00\x00")

func v1alphaTrackerTrackerSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaTrackerTrackerSwaggerJson,
		"v1alpha/tracker/tracker.swagger.json",
	)
}

func v1alphaTrackerTrackerSwaggerJson() (*asset, error) {
	bytes, err := v1alphaTrackerTrackerSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/tracker/tracker.swagger.json", size: 17651, mode: os.FileMode(420), modTime: time.Unix(1588403097, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaExtractorExtractorSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x41\x4f\xdc\x3a\x10\xbe\xef\xaf\xb0\xfc\xde\xf1\x89\xe5\xd1\x1b\x37\x44\xa9\xd4\x03\x12\xea\xb5\x42\xc8\xd8\x93\xac\x51\x62\x9b\x99\x31\x65\x5b\xed\x7f\xaf\x6c\xb2\x6c\x12\x36\xb0\x9b\xb4\xdd\x56\x6a\x4e\x4e\xec\xf9\x3c\xdf\xf8\x9b\x19\xe7\xdb\x4c\x08\x49\x5f\x54\x59\x02\xca\x53\x21\x4f\x8e\x8e\xe5\x7f\xe9\x9b\x75\x85\x97\xa7\x22\xcd\x0b\x21\xd9\x72\x05\x69\xfe\xe1\x7f\x55\x85\x85\x9a\xc3\x23\xa3\xd2\xec\x71\x33\x3a\x0a\xe8\xd9\x67\x6b\x21\xe4\x03\x20\x59\xef\xb2\xcd\xd3\x50\x38\xcf\x82\x80\xe5\x4c\x88\x55\xde\x43\x7b\x47\xb1\x06\x92\xa7\xe2\xf3\x93\x95\x0a\xa1\xb2\x5a\xb1\xf5\x6e\x7e\x47\xde\xa5\xb5\xd7\x79\x6d\x40\x6f\xa2\xde\x71\xad\xe2\x05\x6d\x9c\x9f\xaf\x9d\x36\x10\xc0\x19\x70\xda\x02\xad\xfd\x7e\x5e\x96\xec\x3c\xb5\xdf\x85\x90\x3e\x00\xe6\x1d\x3e\x9a\xc4\xe4\xfd\x1a\x60\x79\xb1\x66\x7d\xd3\x8c\x1a\xde\xd9\x0a\x81\x82\x77\x04\xd4\x01\x13\x42\x9e\x1c\x1f\xf7\x3e\x09\x21\x0d\x90\x46\x1b\xb8\x89\xd6\x99\xa0\xa8\x35\x10\x15\xb1\x12\x6b\xa4\xa3\x16\x7c\x36\x22\xbd\x80\x5a\xbd\x00\x13\x42\xfe\x8b\x50\x24\x9c\x7f\xe6\x06\x0a\xeb\x6c\xc2\xa5\xcd\x29\x35\xee\x7e\x6a\x80\x65\xc7\x7c\xd5\x7a\x5b\xb5\x77\x94\x06\x0a\x15\x2b\x7e\xdb\x7b\x27\xa2\x83\xc7\x00\x9a\xc1\x08\x40\xf4\xf8\x4c\x62\x2a\x07\x8c\x8e\x6d\x0d\x17\x09\xf4\x15\xbf\x67\x5b\x18\xc8\xa0\x50\xd5\xc0\x80\x1b\x01\x3d\x3d\x3d\x3a\x4e\xd5\x59\xe7\xb7\xde\x2c\xfb\xfe\x5a\x37\x34\x83\x70\x1f\x2d\x42\xd2\x08\x63\x84\x1f\x7e\x56\xf7\x11\x88\x77\xa1\x7c\xdd\xa2\xcc\xaa\xec\x93\xdd\x26\xe0\x0d\xec\xf5\xac\x0d\xd7\x44\x6f\x20\x7b\x6a\xc5\x7a\x31\x39\x77\x2e\x33\xca\x1f\x92\x39\xd9\xd9\xbf\x79\xd3\x3c\xbf\x73\xde\x34\x27\x75\x90\xac\x79\x6e\x6e\x2d\xcf\x36\xad\xc8\x40\xa0\x0d\x5a\x3b\x7f\x78\x19\x72\x00\xfd\xed\x1d\xb4\xba\x49\xea\x7b\x01\x90\x6d\x2f\x25\xa4\xc7\x52\x39\xfb\x55\x35\x02\xea\x24\xcb\x1a\x8b\x18\xad\x2b\xe5\xd6\x83\xad\xbd\x89\xb9\xa5\xef\x6d\xd9\xb4\xf3\x73\xef\x88\x51\x59\xd7\x17\xf7\x4e\x20\xa4\x7d\x78\x99\xe5\x6b\x4b\x85\xa8\xba\x62\x91\x96\xa1\xee\xaf\x7f\x65\xaf\x8e\x9e\xb7\xd6\xb5\xee\x51\x5c\x2a\xa7\x4a\xa8\xc1\xf1\x07\xdb\x09\xcb\xde\x07\x53\x29\x57\x46\x55\x8e\x0a\x2d\x2d\x89\xa1\x1e\x63\x79\x70\x39\x8c\x31\x6d\x77\x94\xe9\x52\xd8\x5e\x14\x7a\x19\xb7\x87\x40\x86\xda\xf0\x04\x6d\x10\xa4\x7a\x9a\xca\xc7\x88\x68\x15\xb6\x82\x73\xef\x18\x1c\x0f\x46\xab\xe7\x48\x9e\x53\xc6\xe4\x58\xa8\xea\x6a\xbb\x5b\xaf\x7a\x30\xd4\x18\x22\x56\x3b\x93\xd8\x31\xbc\x4d\xb7\x9b\x10\xdf\xba\x93\xc5\xbf\x48\x53\xbd\xd2\x31\x46\x61\x9d\x86\x75\x28\x7d\x75\xff\x9a\x46\x87\x6c\x7c\x45\x1e\xb8\x69\x4d\xd2\x03\xeb\x05\x98\xab\x43\x33\xcb\x7f\xc6\xb7\xb1\x38\x73\x93\x7a\x7e\x5a\x7f\xb3\x4f\xe2\xb5\xcb\xb4\xaa\xe2\x5b\xf5\xbd\x13\x84\xc2\x63\xad\x38\xdf\xdc\x96\x0c\x6f\x65\x73\xe7\x8e\x39\x81\x22\xf4\x00\x76\xe6\xa7\xbd\x19\xa4\x67\x1d\x43\x09\x38\xc4\xcf\x3a\x7e\x77\x32\xd0\x16\x81\x68\x64\x2f\x37\xc0\xca\x56\x3f\xad\x06\xb5\x25\xb5\x8b\x12\xd3\xbd\x74\xb6\x9a\x7d\x0f\x00\x00\xff\xff\x5b\x7d\xef\xfb\xf0\x11\x00\x00")

func v1alphaExtractorExtractorSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaExtractorExtractorSwaggerJson,
		"v1alpha/extractor/extractor.swagger.json",
	)
}

func v1alphaExtractorExtractorSwaggerJson() (*asset, error) {
	bytes, err := v1alphaExtractorExtractorSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/extractor/extractor.swagger.json", size: 4592, mode: os.FileMode(420), modTime: time.Unix(1588403097, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaSchemaSchemaSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x6e\x83\x30\x10\x44\xef\x7c\xc5\xca\xed\x31\x0a\x6d\x7a\xcb\xad\x87\x7e\x45\x55\x55\x0e\x2c\x64\x23\xb0\xad\xdd\x25\x15\x8a\xf8\xf7\xca\x90\x26\x4e\x14\x94\x48\x3d\x19\x79\xde\x8c\x3d\xb0\x1c\x32\x00\x23\x3f\xb6\xae\x91\xcd\x1a\xcc\x6a\xf9\x62\x16\x71\x8f\x5c\xe5\xcd\x1a\xa2\x0e\x60\x94\xb4\xc1\xa8\xef\x5f\x6d\x13\xb6\x36\x97\x62\x8b\xed\xdf\xb2\x0c\xec\xd5\x8f\x3e\x00\xb3\x47\x16\xf2\x6e\xa4\xa7\x47\x70\x5e\x41\x50\x4d\x06\x30\x8c\xe9\x85\x77\xd2\xb5\x28\x66\x0d\x9f\x93\xcb\x86\xd0\x50\x61\x95\xbc\xcb\x77\xe2\x5d\x64\xbf\x46\x36\xb0\x2f\xbb\xe2\x41\xd6\xea\x36\x82\x87\xe9\x98\x12\x2b\x72\x14\x39\x39\x77\x19\x2f\xbb\xe9\xaa\x77\xd7\x9f\x36\x63\xc5\x3e\x8c\x0d\xfd\x66\x87\x85\x1e\xcb\x4c\x78\x40\x56\x42\x49\xe8\x23\xff\xdd\x71\x73\xb1\x9b\xe4\x88\x32\xb9\xda\x9c\xa4\x61\x71\xf6\xee\x6d\xd3\xe1\x1d\xe3\x22\xd5\x2a\xcf\xad\xd5\xa8\x6e\x7a\xc5\x24\x34\x4b\xd7\xe3\x11\x86\x3b\xa7\xd4\xe2\x07\xb3\xe7\xff\x54\xc4\xab\x80\x87\xfb\x15\xbe\x9c\xad\x47\x4e\x31\x0e\xdb\x4c\x3f\x72\xfa\xb6\xba\x9d\xda\xa2\x88\xad\xef\xbd\xb7\x9b\xd6\x12\xd5\x52\x23\x73\x56\xcb\x6c\xfb\xcb\x1b\x91\x62\x7b\xcd\x03\x98\x67\xc6\x2a\x3a\x9e\xf2\x64\xb6\xf2\x74\xa4\x12\x7e\x98\xfb\x4e\xf1\x3f\xc8\x86\xec\x37\x00\x00\xff\xff\xa3\xf5\xe5\x23\x7d\x03\x00\x00")

func v1alphaSchemaSchemaSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaSchemaSchemaSwaggerJson,
		"v1alpha/schema/schema.swagger.json",
	)
}

func v1alphaSchemaSchemaSwaggerJson() (*asset, error) {
	bytes, err := v1alphaSchemaSchemaSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/schema/schema.swagger.json", size: 893, mode: os.FileMode(420), modTime: time.Unix(1588403097, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaDepsDepsSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x8e\xa3\x30\x10\x44\xef\x7c\x45\xcb\xbb\xc7\x28\xec\x66\x6f\xb9\xed\x61\xbe\x62\x34\x1a\x39\xd0\x90\x8e\xc0\xb6\xba\x9b\x8c\x50\xc4\xbf\x8f\x6c\xa2\xc4\x89\x82\x12\x69\x2e\x80\x5c\xaf\xca\x2e\x68\x4e\x05\x80\x91\x2f\xdb\xb6\xc8\x66\x0b\x66\xb3\xfe\x63\x56\x71\x8d\x5c\xe3\xcd\x16\xa2\x0e\x60\x94\xb4\xc3\xa8\x1f\xff\xda\x2e\xec\x6d\x59\x63\x90\x74\x59\x07\xf6\xea\x93\x07\xc0\x1c\x91\x85\xbc\x4b\xe4\xfc\x08\xce\x2b\x08\xaa\x29\x00\xa6\x94\x5c\x79\x27\x43\x8f\x62\xb6\xf0\x3e\xbb\x6c\x08\x1d\x55\x56\xc9\xbb\xf2\x20\xde\x45\xf6\x23\xb1\x81\x7d\x3d\x54\x2f\xb2\x56\xf7\x11\x3c\xcd\xdb\xd4\xd8\x90\xa3\xc8\xc9\xb5\x47\x3a\xec\x6e\x68\xfe\xbb\xf1\xb2\x18\xeb\x8d\x21\xb5\xf3\xbb\x03\x56\x7a\x2e\x33\xe3\x01\x59\x09\x25\xa3\xcf\xfc\xe7\xc0\xdd\xcd\x6a\x96\x23\xca\xe4\x5a\x73\x91\xa6\xd5\xd5\x7b\xb4\xdd\x80\x4f\x8c\xab\x5c\x6b\x3c\xf7\x56\xa3\xba\x1b\x15\xb3\xd0\x22\xbf\x9f\xb7\x30\x3c\x38\xa5\x1e\xdf\x98\x3d\xff\xa4\x22\xde\x05\xbc\xdc\xaf\xf2\xf5\x62\x3d\x72\x8a\x71\xd0\x16\xfa\x91\xd3\x7f\x9b\xc7\xa9\x3d\x8a\xd8\xf6\xd9\x7b\x7b\x68\xad\x51\x2d\x75\xb2\x64\xb5\xcc\x76\xbc\x3d\x11\x29\xf6\xf7\x3c\x80\xf9\xcd\xd8\x44\xc7\xaf\x32\x9b\xad\x32\x1f\xa9\x8c\x9f\x96\xbe\x53\xfc\x0f\x8a\xa9\xf8\x0e\x00\x00\xff\xff\x21\xa2\x04\x5f\x79\x03\x00\x00")

func v1alphaDepsDepsSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaDepsDepsSwaggerJson,
		"v1alpha/deps/deps.swagger.json",
	)
}

func v1alphaDepsDepsSwaggerJson() (*asset, error) {
	bytes, err := v1alphaDepsDepsSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/deps/deps.swagger.json", size: 889, mode: os.FileMode(420), modTime: time.Unix(1588403097, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v1alphaStoreStoreSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x04\x6d\xc7\xa0\x59\xd3\x5b\x6e\x05\xda\x0d\x1b\x86\xad\xe8\x06\xec\x30\x14\x83\x62\xd3\x0e\x3b\x5b\x12\x28\x3a\x43\x50\xf8\xdf\x07\xc9\x89\xab\xa6\x76\xe3\x20\xc9\x25\x09\xc4\xf7\x9e\xf8\x48\x8a\x79\x4a\x84\x90\xee\x9f\x2a\x0a\x20\x39\x17\x72\x76\xf1\x41\x4e\xfc\x19\xea\xdc\xc8\xb9\xf0\x71\x21\x24\x23\x97\xe0\xe3\xab\x4b\x55\xda\xa5\x9a\x3a\x36\x04\xed\xe7\x85\x25\xc3\x26\xb0\x84\x90\x2b\x20\x87\x46\x07\x6c\xfb\x53\x68\xc3\xc2\x01\xcb\x44\x88\x26\x68\xa7\x46\xbb\xba\x02\x27\xe7\xe2\x77\xcb\x52\xd6\x96\x98\x2a\x46\xa3\xa7\x8f\xce\x68\x8f\x7d\x08\x58\x4b\x26\xab\xd3\x91\x58\xc5\x4b\x0f\x7c\x6a\xaf\xc9\x20\x47\x8d\x1e\xe7\x9e\x9d\x84\x64\x17\x75\x7e\xad\xd7\xdd\xa1\x37\xb8\xb6\xc1\x9f\x59\x3c\x42\xca\x1b\x33\x2d\xdc\x02\x31\x82\x8b\xd0\x1b\xfc\x9f\x9a\xca\x17\xa7\x91\x8e\x63\x42\x5d\xc8\x2e\xd4\x4c\x9e\xb9\x2b\x55\xd6\xb0\x87\x38\x89\x63\xb9\xa1\x4a\xb1\x8f\x2e\xd6\x0c\x91\x68\x12\x7f\x6f\xae\x90\x54\x6b\xc6\x0a\x6e\x89\x0c\x1d\x63\x11\x76\x04\x46\xfb\x4b\x4d\x36\x68\x0f\x35\x83\x1f\xb5\x01\x7f\xa8\xf9\x6a\xd6\xaf\x5a\x81\x73\xaa\xd8\x57\xb7\x5e\x6a\x06\xac\xb0\x74\x43\x54\x45\xa4\xd6\x2f\x33\x42\x86\x6a\x17\x2f\x84\x7c\x4f\x90\x7b\xc6\xbb\x69\x34\x5b\xd3\x78\xa4\x22\x7c\xb3\xa7\x4f\xe1\xf1\xdc\x40\x09\x0c\xf7\xe0\xac\xd1\x0e\xde\x68\xd7\x6b\xea\x47\xd4\xd9\x08\xe2\xde\x3e\x5b\x85\x74\xb6\xda\x84\x4c\x3f\x91\xb2\xcb\xcf\x0c\xd5\x9d\x42\x3a\xb8\x44\x1d\xfb\x18\x93\xc5\x56\xe4\x67\x4b\x3c\x78\x86\xfe\x5e\x9e\xe4\xc5\xc6\x8a\xb3\x53\x2b\x82\x4e\x4d\xe6\x99\x3b\xba\x63\x5a\x73\xbb\xe5\xf6\x2a\x77\xe5\xbb\x51\xac\x4e\x5e\x88\xab\xf3\x2d\xc3\x01\x93\x3d\x93\xb4\x73\x97\x04\x5d\x57\xdd\x9f\x4e\x38\xb9\xbf\xfe\x15\xa5\x22\xbf\xfc\xf8\xfe\x6d\x7b\xfd\x43\x47\xcb\x20\x57\x75\x19\xf2\xf3\xf8\x37\x92\x09\x8f\xe1\x98\xfd\x9c\xbd\xde\x86\x63\x3a\xdd\xdf\x04\xdd\xb3\xb4\x0f\x54\x1b\x6e\xc0\x57\x74\x7c\x8a\x55\xd5\xb7\x7a\xce\xb4\xaa\x0e\x5e\x53\x77\xf5\x18\x8b\xc9\x96\xdd\x24\x4d\xf2\x3f\x00\x00\xff\xff\x3b\xe5\x4a\xd6\x7d\x09\x00\x00")

func v1alphaStoreStoreSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_v1alphaStoreStoreSwaggerJson,
		"v1alpha/store/store.swagger.json",
	)
}

func v1alphaStoreStoreSwaggerJson() (*asset, error) {
	bytes, err := v1alphaStoreStoreSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v1alpha/store/store.swagger.json", size: 2429, mode: os.FileMode(420), modTime: time.Unix(1588403097, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"v1alpha/tracker/tracker.swagger.json":     v1alphaTrackerTrackerSwaggerJson,
	"v1alpha/extractor/extractor.swagger.json": v1alphaExtractorExtractorSwaggerJson,
	"v1alpha/schema/schema.swagger.json":       v1alphaSchemaSchemaSwaggerJson,
	"v1alpha/deps/deps.swagger.json":           v1alphaDepsDepsSwaggerJson,
	"v1alpha/store/store.swagger.json":         v1alphaStoreStoreSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"v1alpha": &bintree{nil, map[string]*bintree{
		"deps": &bintree{nil, map[string]*bintree{
			"deps.swagger.json": &bintree{v1alphaDepsDepsSwaggerJson, map[string]*bintree{}},
		}},
		"extractor": &bintree{nil, map[string]*bintree{
			"extractor.swagger.json": &bintree{v1alphaExtractorExtractorSwaggerJson, map[string]*bintree{}},
		}},
		"schema": &bintree{nil, map[string]*bintree{
			"schema.swagger.json": &bintree{v1alphaSchemaSchemaSwaggerJson, map[string]*bintree{}},
		}},
		"store": &bintree{nil, map[string]*bintree{
			"store.swagger.json": &bintree{v1alphaStoreStoreSwaggerJson, map[string]*bintree{}},
		}},
		"tracker": &bintree{nil, map[string]*bintree{
			"tracker.swagger.json": &bintree{v1alphaTrackerTrackerSwaggerJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
